Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
Output: [2]

Constraints:
n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
 
Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Hint 1
This is a really easy problem if you decide to use additional memory. 
For those trying to write an initial solution using additional memory, think counters!
Hint 2
However, the trick really is to not use any additional space than what is already available to use. 
Sometimes, multiple passes over the input array help find the solution. 
However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution.
Hint 3
The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. 
Can we use this information and modify the array in-place somehow to find what we need?

Решение 1 (Not O(n)):


Подход с использованием множества (Set)
Этот метод использует дополнительное пространство для хранения уникальных чисел из диапазона [1, n].

Шаги:
Создаем множество (Set) из чисел в диапазоне [1, n].
Удаляем из множества числа, которые присутствуют в массиве nums.
Оставшиеся числа в множестве и будут отсутствующими числами.

Объяснение:
Создание массива allElements:
Мы создаем массив чисел от 1 до n с помощью функции range(1, $n).

Создание множества flipNums:
Используем функцию array_flip($nums), которая делает ключи массива nums значениями, создавая множество уникальных чисел.

Нахождение отсутствующих чисел:
Сравниваем массив allElements с массивом ключей из flipNums, чтобы найти недостающие числа. Функция array_diff() вернет числа, которых нет в numsSet.

Решение 2:
Пометка присутствующих чисел:
Для каждого элемента массива мы определяем индекс, соответствующий числу: abs($num) - 1.
Мы помечаем число на этом индексе как отрицательное. Если число уже отрицательное, это означает, что оно уже было помечено ранее.
Нахождение отсутствующих чисел:
После первого прохода по массиву те индексы, которые остались положительными, означают, что соответствующее число отсутствует.
